import os
import Generator


class SingleGenerator(Generator.Generator):
	def __init__(self, template_path, xls_helper, column_names, encode):
		super(SingleGenerator, self).__init__(template_path, xls_helper, column_names, encode)

		self.items = []
		self.start_loop_token = '<!--StartLoop-->'
		self.end_loop_token = '<!--EndLoop-->'

		self.start = self.template.find(self.start_loop_token)
		self.end = self.template.find(self.end_loop_token, self.start)

		self.loop_template_item = self.template[self.start + len(self.start_loop_token): self.end]
		self.loop_template_item = self.loop_template_item.strip()

	def generate_for(self, row_index):
		param_map = self.fetch_map_for(row_index)
		content = self.loop_template_item % param_map
		self.items.append(content)

	def save_results(self, output_file_name):
		assert output_file_name is not None

		f = open(output_file_name, 'w')

		# copy content before loop
		prefix = self.template[:self.start]
		f.write(prefix.encode(self.encode))

		# copy content generated by loop
		for item in self.items:
			f.write(item.encode(self.encode))
			f.write(os.linesep)
		# remove last line separator
		f.seek(-len(os.linesep), 1)
		f.truncate()

		# copy content after loop
		suffix = self.template[self.end + len(self.end_loop_token):]
		f.write(suffix.encode(self.encode))
		f.close()
